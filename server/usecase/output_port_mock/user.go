// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/output_port/user.go

// Package mock_output_port is a generated GoMock package.
package mock_output_port

import (
	reflect "reflect"
	time "time"

	entity "chess-alpha/server/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockUserRepository) FindByID(userID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepositoryMockRecorder) FindByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepository)(nil).FindByID), userID)
}

// FindByLoginID mocks base method.
func (m *MockUserRepository) FindByLoginID(loginID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoginID", loginID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLoginID indicates an expected call of FindByLoginID.
func (mr *MockUserRepositoryMockRecorder) FindByLoginID(loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoginID", reflect.TypeOf((*MockUserRepository)(nil).FindByLoginID), loginID)
}

// MockUserAuth is a mock of UserAuth interface.
type MockUserAuth struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthMockRecorder
}

// MockUserAuthMockRecorder is the mock recorder for MockUserAuth.
type MockUserAuthMockRecorder struct {
	mock *MockUserAuth
}

// NewMockUserAuth creates a new mock instance.
func NewMockUserAuth(ctrl *gomock.Controller) *MockUserAuth {
	mock := &MockUserAuth{ctrl: ctrl}
	mock.recorder = &MockUserAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuth) EXPECT() *MockUserAuthMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUserAuth) Authenticate(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUserAuthMockRecorder) Authenticate(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUserAuth)(nil).Authenticate), token)
}

// AuthenticateForUpdateEmail mocks base method.
func (m *MockUserAuth) AuthenticateForUpdateEmail(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateForUpdateEmail", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateForUpdateEmail indicates an expected call of AuthenticateForUpdateEmail.
func (mr *MockUserAuthMockRecorder) AuthenticateForUpdateEmail(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateForUpdateEmail", reflect.TypeOf((*MockUserAuth)(nil).AuthenticateForUpdateEmail), token)
}

// AuthenticateForUpdatePassword mocks base method.
func (m *MockUserAuth) AuthenticateForUpdatePassword(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateForUpdatePassword", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateForUpdatePassword indicates an expected call of AuthenticateForUpdatePassword.
func (mr *MockUserAuthMockRecorder) AuthenticateForUpdatePassword(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateForUpdatePassword", reflect.TypeOf((*MockUserAuth)(nil).AuthenticateForUpdatePassword), token)
}

// CheckPassword mocks base method.
func (m *MockUserAuth) CheckPassword(user entity.User, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockUserAuthMockRecorder) CheckPassword(user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockUserAuth)(nil).CheckPassword), user, password)
}

// GenerateInitialPassword mocks base method.
func (m *MockUserAuth) GenerateInitialPassword(length int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInitialPassword", length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateInitialPassword indicates an expected call of GenerateInitialPassword.
func (mr *MockUserAuthMockRecorder) GenerateInitialPassword(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInitialPassword", reflect.TypeOf((*MockUserAuth)(nil).GenerateInitialPassword), length)
}

// HashPassword mocks base method.
func (m *MockUserAuth) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockUserAuthMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockUserAuth)(nil).HashPassword), password)
}

// IssueUserToken mocks base method.
func (m *MockUserAuth) IssueUserToken(user entity.User, issuedAt time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueUserToken", user, issuedAt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueUserToken indicates an expected call of IssueUserToken.
func (mr *MockUserAuthMockRecorder) IssueUserToken(user, issuedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueUserToken", reflect.TypeOf((*MockUserAuth)(nil).IssueUserToken), user, issuedAt)
}

// IssueUserTokenForUpdateEmail mocks base method.
func (m *MockUserAuth) IssueUserTokenForUpdateEmail(user entity.User, issuedAt time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueUserTokenForUpdateEmail", user, issuedAt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueUserTokenForUpdateEmail indicates an expected call of IssueUserTokenForUpdateEmail.
func (mr *MockUserAuthMockRecorder) IssueUserTokenForUpdateEmail(user, issuedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueUserTokenForUpdateEmail", reflect.TypeOf((*MockUserAuth)(nil).IssueUserTokenForUpdateEmail), user, issuedAt)
}

// IssueUserTokenForUpdatePassword mocks base method.
func (m *MockUserAuth) IssueUserTokenForUpdatePassword(user entity.User, issuedAt time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueUserTokenForUpdatePassword", user, issuedAt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueUserTokenForUpdatePassword indicates an expected call of IssueUserTokenForUpdatePassword.
func (mr *MockUserAuthMockRecorder) IssueUserTokenForUpdatePassword(user, issuedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueUserTokenForUpdatePassword", reflect.TypeOf((*MockUserAuth)(nil).IssueUserTokenForUpdatePassword), user, issuedAt)
}
