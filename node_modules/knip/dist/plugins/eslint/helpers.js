import { compact } from '#p/util/array.js';
import { getPackageNameFromFilePath, getPackageNameFromModuleSpecifier } from '#p/util/modules.js';
import { basename, dirname, isAbsolute, isInternal, toAbsolute } from '#p/util/path.js';
import { load } from '#p/util/plugin.js';
import { _resolve } from '#p/util/require.js';
import { getDependenciesFromConfig } from '../babel/index.js';
const getDependencies = (config) => {
    const extendsSpecifiers = config.extends ? [config.extends].flat().map(resolveExtendSpecifier) : [];
    if (extendsSpecifiers.some(specifier => specifier?.startsWith('eslint-plugin-prettier')))
        extendsSpecifiers.push('eslint-config-prettier');
    const plugins = config.plugins ? config.plugins.map(resolvePluginSpecifier) : [];
    const parser = config.parser ?? config.parserOptions?.parser;
    const babelDependencies = config.parserOptions?.babelOptions
        ? getDependenciesFromConfig(config.parserOptions.babelOptions)
        : [];
    const settings = config.settings ? getDependenciesFromSettings(config.settings) : [];
    const overrides = config.overrides ? [config.overrides].flat().flatMap(getDependencies) : [];
    return compact([...extendsSpecifiers, ...plugins, parser, ...babelDependencies, ...settings, ...overrides]);
};
export const getDependenciesDeep = async (localConfig, options, dependencies = new Set()) => {
    const { configFileDir } = options;
    const addAll = (deps) => {
        for (const dependency of deps)
            dependencies.add(dependency);
    };
    if (localConfig) {
        if (localConfig.extends) {
            for (const extend of [localConfig.extends].flat()) {
                if (isInternal(extend)) {
                    const filePath = _resolve(toAbsolute(extend, configFileDir));
                    dependencies.add(filePath);
                    const localConfig = await load(filePath);
                    const opts = { ...options, configFileDir: dirname(filePath), configFileName: basename(filePath) };
                    addAll(await getDependenciesDeep(localConfig, opts, dependencies));
                }
            }
        }
        addAll(getDependencies(localConfig));
    }
    return dependencies;
};
const isQualifiedSpecifier = (specifier) => specifier === 'eslint' ||
    /\/eslint-(config|plugin)$/.test(specifier) ||
    /.+eslint-(config|plugin)\//.test(specifier) ||
    /eslint-(config|plugin)-/.test(specifier);
const resolveSpecifier = (namespace, rawSpecifier) => {
    const specifier = rawSpecifier.replace(/(^plugin:|:.+$)/, '');
    if (isQualifiedSpecifier(specifier))
        return specifier;
    if (!specifier.startsWith('@')) {
        const id = rawSpecifier.startsWith('plugin:')
            ? getPackageNameFromModuleSpecifier(specifier)
            : specifier.split('/')[0];
        return `${namespace}-${id}`;
    }
    const [scope, name, ...rest] = specifier.split('/');
    if (rawSpecifier.startsWith('plugin:') && rest.length === 0)
        return [scope, namespace].join('/');
    return [scope, name ? `${namespace}-${name}` : namespace, ...rest].join('/');
};
const resolvePluginSpecifier = (specifier) => resolveSpecifier('eslint-plugin', specifier);
const resolveExtendSpecifier = (specifier) => {
    if (isInternal(specifier))
        return;
    const namespace = specifier.startsWith('plugin:') ? 'eslint-plugin' : 'eslint-config';
    return resolveSpecifier(namespace, specifier);
};
const getDependenciesFromSettings = (settings = {}) => {
    return Object.entries(settings).flatMap(([settingKey, settings]) => {
        if (settingKey === 'import/resolver') {
            return (typeof settings === 'string' ? [settings] : Object.keys(settings))
                .filter(key => key !== 'node')
                .map(key => {
                if (isInternal(key))
                    return key;
                if (isAbsolute(key))
                    return getPackageNameFromFilePath(key);
                return `eslint-import-resolver-${key}`;
            });
        }
        if (settingKey === 'import/parsers') {
            return (typeof settings === 'string' ? [settings] : Object.keys(settings)).map(key => {
                if (isAbsolute(key))
                    return getPackageNameFromFilePath(key);
                return key;
            });
        }
    });
};
