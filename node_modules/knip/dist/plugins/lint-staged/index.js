import { getDependenciesFromScripts, hasDependency } from '#p/util/plugin.js';
const title = 'lint-staged';
const enablers = ['lint-staged'];
const isEnabled = ({ dependencies }) => hasDependency(dependencies, enablers);
const packageJsonPath = 'lint-staged';
const config = [
    '.lintstagedrc',
    '.lintstagedrc.json',
    '.lintstagedrc.{yml,yaml}',
    '.lintstagedrc.{js,mjs,cjs}',
    'lint-staged.config.{js,mjs,cjs}',
    'package.json',
];
const resolveConfig = async (config, options) => {
    if (typeof config === 'function')
        config = config();
    if (!config)
        return [];
    const dependencies = new Set();
    for (const entry of Object.values(config).flat()) {
        const scripts = [typeof entry === 'function' ? await entry([]) : entry].flat();
        for (const id of getDependenciesFromScripts(scripts, options))
            dependencies.add(id);
    }
    return Array.from(dependencies);
};
export default {
    title,
    enablers,
    isEnabled,
    packageJsonPath,
    config,
    resolveConfig,
};
