import { compact } from '#p/util/array.js';
import { getPackageNameFromModuleSpecifier } from '#p/util/modules.js';
import { getDependenciesFromScripts, hasDependency } from '#p/util/plugin.js';
const title = 'Nx';
const enablers = ['nx', /^@nrwl\//, /^@nx\//];
const isEnabled = ({ dependencies }) => hasDependency(dependencies, enablers);
const config = ['nx.json', 'project.json', '{apps,libs}/**/project.json'];
const findNxDependenciesInNxJson = async (localConfig) => {
    const targetsDefault = localConfig.targetDefaults
        ? Object.keys(localConfig.targetDefaults)
            .filter(it => it.includes(':') && it.startsWith('@'))
            .map(it => it.split(':')[0])
        : [];
    const plugins = localConfig.plugins && Array.isArray(localConfig.plugins)
        ? localConfig.plugins
            .map(item => (typeof item === 'string' ? item : item.plugin))
            .map(it => getPackageNameFromModuleSpecifier(it))
            .filter(value => value !== undefined)
        : [];
    const generators = localConfig.generators
        ? Object.keys(localConfig.generators)
            .map(it => getPackageNameFromModuleSpecifier(it))
            .filter(value => value !== undefined)
        : [];
    return compact([...targetsDefault, ...plugins, ...generators]);
};
const resolveConfig = async (localConfig, options) => {
    const { configFileName } = options;
    if (configFileName === 'nx.json') {
        return findNxDependenciesInNxJson(localConfig, options);
    }
    const config = localConfig;
    const targets = config.targets ? Object.values(config.targets) : [];
    const executors = targets
        .map(target => target?.executor)
        .filter(executor => executor && !executor.startsWith('.'))
        .map(executor => executor?.split(':')[0]);
    const scripts = targets
        .filter(target => target.executor === 'nx:run-commands')
        .flatMap(target => target.options?.commands ?? (target.options?.command ? [target.options.command] : []));
    const dependencies = getDependenciesFromScripts(scripts, options);
    return compact([...executors, ...dependencies]);
};
export default {
    title,
    enablers,
    isEnabled,
    config,
    resolveConfig,
};
