import { isInternal } from '#p/util/path.js';
import { hasDependency } from '#p/util/plugin.js';
import { toEntryPattern } from '#p/util/protocols.js';
const title = 'LintHTML';
const packageJsonPath = 'linthtmlConfig';
const enablers = ['@linthtml/linthtml'];
const isEnabled = ({ dependencies }) => hasDependency(dependencies, enablers);
const config = [
    '.linthtmlrc',
    '.linthtmlrc.json',
    '.linthtmlrc.yml',
    '.linthtmlrc.{js,cjs}',
    'linthtml.config.js',
    'package.json',
];
const resolveConfig = config => {
    const extensions = [config.extends ?? []]
        .flat()
        .map(extension => (isInternal(extension) ? toEntryPattern(extension) : extension));
    const plugins = [config.plugins ?? []].flat().map(plugin => (isInternal(plugin) ? toEntryPattern(plugin) : plugin));
    return [...extensions, ...plugins];
};
export default {
    title,
    enablers,
    isEnabled,
    packageJsonPath,
    config,
    resolveConfig,
};
