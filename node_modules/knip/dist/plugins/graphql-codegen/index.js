import { isInternal } from '#p/util/path.js';
import { hasDependency } from '#p/util/plugin.js';
import { toEntryPattern } from '#p/util/protocols.js';
import { isConfigurationOutput } from './types.js';
const title = 'GraphQL Codegen';
const enablers = [/^@graphql-codegen\//];
const isEnabled = ({ dependencies }) => hasDependency(dependencies, enablers);
const packageJsonPath = 'codegen';
const config = [
    'codegen.{json,yml,yaml,js,ts,mjs,cts}',
    '.codegenrc.{json,yml,yaml,js,ts}',
    'codegen.config.js',
    'package.json',
];
const resolveConfig = config => {
    const generateSet = config.generates ? Object.values(config.generates) : [];
    const configurationOutput = generateSet.filter(isConfigurationOutput);
    const presets = configurationOutput
        .map(configOutput => (configOutput.preset ? configOutput.preset : undefined))
        .filter((preset) => typeof preset === 'string')
        .map(presetName => `@graphql-codegen/${presetName}${presetName.endsWith('-preset') ? '' : '-preset'}`);
    const flatPlugins = generateSet
        .filter((config) => !isConfigurationOutput(config))
        .flatMap(item => Object.keys(item))
        .map(plugin => `@graphql-codegen/${plugin}`);
    const nestedPlugins = configurationOutput
        .flatMap(configOutput => (configOutput.plugins ? configOutput.plugins : []))
        .flatMap(plugin => {
        if (typeof plugin !== 'string')
            return [];
        if (isInternal(plugin))
            return [toEntryPattern(plugin)];
        return [`@graphql-codegen/${plugin}`];
    });
    return [...presets, ...flatPlugins, ...nestedPlugins];
};
export default {
    title,
    enablers,
    isEnabled,
    packageJsonPath,
    config,
    resolveConfig,
};
