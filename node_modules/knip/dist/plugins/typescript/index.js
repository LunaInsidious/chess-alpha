import { compact } from '#p/util/array.js';
import { dirname, isInternal, join, toAbsolute } from '#p/util/path.js';
import { hasDependency, loadJSON } from '#p/util/plugin.js';
import { loadTSConfig } from '#p/util/tsconfig-loader.js';
const title = 'TypeScript';
const enablers = ['typescript'];
const isEnabled = ({ dependencies }) => hasDependency(dependencies, enablers);
const config = ['tsconfig.json', 'tsconfig.*.json'];
const production = [];
const getExtends = async (configFilePath, internalExtends = new Set()) => {
    const filePath = configFilePath.replace(/(\.json)?$/, '.json');
    const localConfig = await loadJSON(filePath);
    if (!localConfig)
        return internalExtends;
    const extends_ = localConfig.extends ? [localConfig.extends].flat() : [];
    for (const extend of extends_) {
        if (isInternal(extend)) {
            const presetConfigPath = toAbsolute(extend, dirname(configFilePath));
            await getExtends(presetConfigPath, internalExtends);
        }
    }
    for (const extend of extends_)
        internalExtends.add(extend);
    return internalExtends;
};
const resolveConfig = async (localConfig, options) => {
    const { isProduction, configFileDir, configFileName } = options;
    const configFilePath = join(configFileDir, configFileName);
    const { compilerOptions } = await loadTSConfig(configFilePath);
    const extend = await getExtends(configFilePath);
    if (!(compilerOptions && localConfig))
        return [];
    const jsx = compilerOptions?.jsxImportSource ? [compilerOptions.jsxImportSource] : [];
    if (isProduction)
        return [...jsx];
    const types = compilerOptions.types ?? [];
    const plugins = Array.isArray(compilerOptions?.plugins)
        ? compilerOptions.plugins.map(plugin => (typeof plugin === 'object' && 'name' in plugin ? plugin.name : ''))
        : [];
    const importHelpers = compilerOptions?.importHelpers ? ['tslib'] : [];
    return compact([...extend, ...types, ...plugins, ...importHelpers, ...jsx]);
};
export default {
    title,
    enablers,
    isEnabled,
    config,
    production,
    resolveConfig,
};
