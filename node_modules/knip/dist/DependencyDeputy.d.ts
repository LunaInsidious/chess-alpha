import type { Workspace } from './ConfigurationChief.js';
import type { ConfigurationHints, Issue } from './types/issues.js';
import type { PackageJson } from './types/package-json.js';
import type { DependencyArray, DependencySet, HostDependencies, InstalledBinaries, WorkspaceManifests } from './types/workspace.js';
type Options = {
    isProduction: boolean;
    isStrict: boolean;
};
export declare class DependencyDeputy {
    isProduction: boolean;
    isStrict: boolean;
    _manifests: WorkspaceManifests;
    referencedDependencies: Map<string, Set<string>>;
    referencedBinaries: Map<string, Set<string>>;
    hostDependencies: Map<string, HostDependencies>;
    installedBinaries: Map<string, InstalledBinaries>;
    hasTypesIncluded: Map<string, Set<string>>;
    ignoreBinaries: (string | RegExp)[];
    ignoreDependencies: (string | RegExp)[];
    constructor({ isProduction, isStrict }: Options);
    addWorkspace({ name, cwd, dir, manifestPath, manifest, ignoreDependencies, ignoreBinaries, }: {
        name: string;
        cwd: string;
        dir: string;
        manifestPath: string;
        manifest: PackageJson;
        ignoreDependencies: (string | RegExp)[];
        ignoreBinaries: (string | RegExp)[];
    }): void;
    setIgnored(ignoreBinaries: (string | RegExp)[], ignoreDependencies: (string | RegExp)[]): void;
    getWorkspaceManifest(workspaceName: string): {
        workspaceDir: string;
        manifestPath: string;
        dependencies: DependencyArray;
        devDependencies: DependencyArray;
        peerDependencies: DependencySet;
        optionalPeerDependencies: DependencyArray;
        allDependencies: DependencySet;
        ignoreDependencies: (string | RegExp)[];
        ignoreBinaries: (string | RegExp)[];
    } | undefined;
    getProductionDependencies(workspaceName: string): DependencyArray;
    getDevDependencies(workspaceName: string): DependencyArray;
    getDependencies(workspaceName: string): DependencySet;
    setInstalledBinaries(workspaceName: string, installedBinaries: Map<string, Set<string>>): void;
    getInstalledBinaries(workspaceName: string): InstalledBinaries | undefined;
    setHasTypesIncluded(workspaceName: string, hasTypesIncluded: Set<string>): void;
    getHasTypesIncluded(workspaceName: string): InstalledBinaries | undefined;
    addReferencedDependency(workspaceName: string, packageName: string): void;
    addReferencedBinary(workspaceName: string, binaryName: string): void;
    setHostDependencies(workspaceName: string, hostDependencies: HostDependencies): void;
    getHostDependenciesFor(workspaceName: string, dependency: string): {
        name: string;
        isPeerOptional: boolean;
    }[];
    getPeerDependencies(workspaceName: string): DependencySet;
    getOptionalPeerDependencies(workspaceName: string): DependencyArray;
    maybeAddReferencedExternalDependency(workspace: Workspace, packageName: string): boolean;
    maybeAddReferencedBinary(workspace: Workspace, binaryName: string): boolean;
    private isInDependencies;
    settleDependencyIssues(): {
        dependencyIssues: Issue[];
        devDependencyIssues: Issue[];
        optionalPeerDependencyIssues: Issue[];
    };
    getConfigurationHints(): {
        configurationHints: ConfigurationHints;
    };
}
export {};
