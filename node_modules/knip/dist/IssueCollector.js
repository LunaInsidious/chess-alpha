import picomatch from 'picomatch';
import { initCounters, initIssues } from './issues/initializers.js';
import { timerify } from './util/Performance.js';
import { relative } from './util/path.js';
const hasHint = (hints, hint) => Array.from(hints).some(item => item.identifier === hint.identifier && item.type === hint.type && item.workspaceName === hint.workspaceName);
const isMatch = timerify(picomatch.isMatch, 'isMatch');
export class IssueCollector {
    cwd;
    rules;
    filters;
    issues = initIssues();
    counters = initCounters();
    referencedFiles = new Set();
    configurationHints = new Set();
    ignorePatterns = new Set();
    isMatch;
    constructor({ cwd, rules, filters }) {
        this.cwd = cwd;
        this.rules = rules;
        this.filters = filters;
        this.isMatch = () => false;
    }
    addIgnorePatterns(patterns) {
        for (const pattern of patterns)
            this.ignorePatterns.add(pattern);
        const p = [...this.ignorePatterns];
        this.isMatch = (filePath) => isMatch(filePath, p, { dot: true });
    }
    addFileCounts({ processed, unused }) {
        this.counters.processed += processed;
        this.counters.total += processed + unused;
    }
    addFilesIssues(filePaths) {
        for (const filePath of filePaths) {
            if (this.filters.dir && !filePath.startsWith(`${this.filters.dir}/`))
                continue;
            if (this.referencedFiles.has(filePath))
                continue;
            if (this.isMatch(filePath))
                continue;
            this.issues.files.add(filePath);
            this.issues._files.add({ type: 'files', filePath, symbol: relative(filePath) });
            this.counters.files++;
            this.counters.processed++;
        }
    }
    addIssue(issue) {
        if (this.filters.dir && !issue.filePath.startsWith(`${this.filters.dir}/`))
            return;
        if (this.isMatch(issue.filePath))
            return;
        const key = relative(this.cwd, issue.filePath);
        issue.severity = this.rules[issue.type];
        this.issues[issue.type][key] = this.issues[issue.type][key] ?? {};
        if (!this.issues[issue.type][key][issue.symbol]) {
            this.issues[issue.type][key][issue.symbol] = issue;
            this.counters[issue.type]++;
        }
    }
    addConfigurationHint(issue) {
        if (!hasHint(this.configurationHints, issue)) {
            this.configurationHints.add(issue);
        }
    }
    purge() {
        const unusedFiles = this.issues.files;
        this.issues = initIssues();
        this.counters = initCounters();
        return unusedFiles;
    }
    getIssues() {
        return {
            issues: this.issues,
            counters: this.counters,
            configurationHints: this.configurationHints,
        };
    }
}
