import util from 'node:util';
import picocolors from 'picocolors';
import parsedArgValues from './cli-arguments.js';
import { relative } from './path.js';
const { debug, trace } = parsedArgValues;
const IS_DEBUG_ENABLED = debug ?? false;
const IS_TRACE_ENABLED = trace ?? false;
const noop = () => { };
const inspectOptions = { maxArrayLength: null, depth: null, colors: true };
export const inspect = (obj) => console.log(util.inspect(obj, inspectOptions));
const ctx = (text) => typeof text === 'string'
    ? picocolors.yellow(`[${text}]`)
    : `${picocolors.yellow(`[${text[0]}]`)} ${picocolors.cyan(text[1])}`;
const logArray = (collection) => {
    console.log(util.inspect(collection.sort(), inspectOptions));
};
export const debugLog = IS_DEBUG_ENABLED
    ? (context, message) => console.log(`${ctx(context)} ${message}`)
    : noop;
export const debugLogObject = IS_DEBUG_ENABLED
    ? (context, name, obj) => {
        console.log(`${ctx(context)} ${name}`);
        console.log(util.inspect(typeof obj === 'function' ? obj() : obj, inspectOptions));
    }
    : noop;
export const debugLogArray = IS_DEBUG_ENABLED
    ? (context, message, elements) => {
        const collection = Array.from(elements);
        console.debug(`${ctx(context)} ${message} (${collection.length})`);
        logArray(collection);
    }
    : noop;
const levels = ['①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨', '⑩', '⑪', '⑫', '⑬', '⑭', '⑮', '⑯'];
export const exportLookupLog = IS_TRACE_ENABLED
    ? (depth, message, filePath) => {
        if (depth === -1)
            console.log(`\n${message}`, relative(filePath));
        else
            console.log(new Array(depth + 1).join('  '), levels[depth], message, relative(filePath));
    }
    : noop;
