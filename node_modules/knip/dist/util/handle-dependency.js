import { getPackageNameFromFilePath, getPackageNameFromModuleSpecifier, normalizeSpecifierFromFilePath, } from './modules.js';
import { isInNodeModules, isInternal } from './path.js';
import { fromBinary, isBinary } from './protocols.js';
import { _resolveSpecifier } from './require.js';
import { resolveSync } from './resolve.js';
export const getHandler = (collector, deputy, chief) => (specifier, containingFilePath, workspace) => {
    if (isBinary(specifier)) {
        const binaryName = fromBinary(specifier);
        const isHandled = deputy.maybeAddReferencedBinary(workspace, binaryName);
        if (!isHandled)
            collector.addIssue({ type: 'binaries', filePath: containingFilePath, symbol: binaryName });
    }
    else {
        if (isInternal(specifier)) {
            const resolvedFilePath = resolveSync(specifier, containingFilePath);
            if (resolvedFilePath)
                return resolvedFilePath;
            collector.addIssue({ type: 'unresolved', filePath: containingFilePath, symbol: specifier });
        }
        else {
            const packageName = isInNodeModules(specifier)
                ? getPackageNameFromFilePath(specifier)
                : getPackageNameFromModuleSpecifier(specifier);
            const isHandled = packageName && deputy.maybeAddReferencedExternalDependency(workspace, packageName);
            if (!isHandled)
                collector.addIssue({ type: 'unlisted', filePath: containingFilePath, symbol: specifier });
            if (packageName && specifier !== packageName) {
                const otherWorkspace = chief.workspacePackagesByName.get(packageName);
                if (otherWorkspace) {
                    const filePath = _resolveSpecifier(otherWorkspace.dir, normalizeSpecifierFromFilePath(specifier));
                    if (filePath)
                        return filePath;
                    collector.addIssue({ type: 'unresolved', filePath: containingFilePath, symbol: specifier });
                }
            }
        }
    }
};
