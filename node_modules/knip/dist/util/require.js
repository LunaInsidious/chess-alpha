import { createRequire as nodeCreateRequire } from 'node:module';
import { pathToFileURL } from 'node:url';
import createJITI from 'jiti';
import transform from 'jiti/dist/babel.js';
import { timerify } from './Performance.js';
import { debugLog } from './debug.js';
import { getPackageNameFromModuleSpecifier } from './modules.js';
import { cwd, join, toPosix } from './path.js';
import { jitiCJS } from './register.js';
const createRequire = (path) => nodeCreateRequire(pathToFileURL(path ?? cwd));
const require = createRequire();
export const _require = timerify(require);
const resolve = (specifier) => toPosix(jitiCJS.resolve(specifier));
const tryResolve = (specifier, from) => {
    try {
        return resolve(specifier);
    }
    catch {
        debugLog('*', `Unable to resolve ${specifier} (from ${from})`);
    }
};
const resolveSpecifier = (dir, specifier) => {
    try {
        const jiti = createJITI(dir);
        return toPosix(jiti.resolve(specifier));
    }
    catch {
        const packageName = getPackageNameFromModuleSpecifier(specifier);
        if (packageName) {
            const relativeSpecifier = specifier.replace(packageName, '.');
            return tryResolve(join(dir, relativeSpecifier), dir);
        }
    }
};
const rushstackMatch = /require\(("|')@rushstack\/(eslint-config\/patch|eslint-patch)\/modern-module-resolution("|')\)/;
const jiti = createJITI(process.cwd(), {
    cache: false,
    transform: (opts) => {
        opts.source = opts.source.replace(rushstackMatch, '');
        return transform(opts);
    },
});
const loadESLintConfig = (configFilePath) => {
    return jiti(configFilePath);
};
export const _loadESLintConfig = timerify(loadESLintConfig);
export const _resolve = timerify(resolve);
export const _tryResolve = timerify(tryResolve);
export const _resolveSpecifier = timerify(resolveSpecifier);
