import { isBuiltin } from 'node:module';
import ts from 'typescript';
import { timerify } from '../util/Performance.js';
import { isStartsLikePackageName, sanitizeSpecifier } from '../util/modules.js';
import { isInNodeModules } from '../util/path.js';
import { shouldIgnore } from '../util/tag.js';
import { getAccessMembers, getDestructuredIds, getJSDocTags, getLineAndCharacterOfPosition, isAccessExpression, isConsiderReferencedNS, isDestructuring, } from './ast-helpers.js';
import getDynamicImportVisitors from './visitors/dynamic-imports/index.js';
import getExportVisitors from './visitors/exports/index.js';
import { getImportsFromPragmas } from './visitors/helpers.js';
import getImportVisitors from './visitors/imports/index.js';
import getScriptVisitors from './visitors/scripts/index.js';
const getVisitors = (sourceFile) => ({
    export: getExportVisitors(sourceFile),
    import: getImportVisitors(sourceFile),
    dynamicImport: getDynamicImportVisitors(sourceFile),
    script: getScriptVisitors(sourceFile),
});
const createSerializableMember = (node, member, pos) => {
    const { line, character } = node.getSourceFile().getLineAndCharacterOfPosition(pos);
    return {
        symbol: member.node.symbol,
        identifier: member.identifier,
        type: member.type,
        pos: member.pos,
        line: line + 1,
        col: character + 1,
        fix: member.fix,
        refs: 0,
        jsDocTags: getJSDocTags(member.node),
    };
};
const getImportsAndExports = (sourceFile, getResolvedModule, typeChecker, options) => {
    const { skipTypeOnly, tags } = options;
    const internalImports = {};
    const externalImports = new Set();
    const unresolvedImports = new Set();
    const exports = {};
    const aliasedExports = new Map();
    const scripts = new Set();
    const importedInternalSymbols = new Map();
    const visitors = getVisitors(sourceFile);
    const addInternalImport = (options) => {
        const { identifier, specifier, symbol, filePath, namespace, isReExport } = options;
        const isStar = identifier === '*';
        const internalImport = (internalImports[filePath] = internalImports[filePath] ?? {
            specifier,
            hasStar: isStar,
            isReExport,
            isReExportedBy: new Set(),
            isReExportedAs: new Set(),
            isReExportedNs: new Set(),
            importedNs: new Set(),
            identifiers: new Set(),
        });
        if (isReExport) {
            internalImport.isReExport = true;
            if (namespace && isStar)
                internalImport.isReExportedAs.add([sourceFile.fileName, namespace]);
            else if (namespace)
                internalImport.isReExportedNs.add([sourceFile.fileName, namespace]);
            else
                internalImport.isReExportedBy.add(sourceFile.fileName);
        }
        if (isStar) {
            internalImport.hasStar = true;
            if (symbol)
                internalImport.importedNs.add(String(symbol.escapedName));
        }
        else {
            internalImport.identifiers.add(namespace ?? identifier);
        }
        if (symbol)
            importedInternalSymbols.set(symbol, filePath);
    };
    const addImport = (options, node) => {
        const { specifier, isTypeOnly, pos, identifier = '__anonymous', isReExport = false } = options;
        if (isBuiltin(specifier))
            return;
        const module = getResolvedModule(specifier);
        if (module?.resolvedModule) {
            const filePath = module.resolvedModule.resolvedFileName;
            if (filePath) {
                if (module.resolvedModule.isExternalLibraryImport) {
                    if (!isInNodeModules(filePath)) {
                        addInternalImport({ ...options, identifier, filePath, isReExport });
                    }
                    if (skipTypeOnly && isTypeOnly)
                        return;
                    const sanitizedSpecifier = sanitizeSpecifier(specifier);
                    if (!isStartsLikePackageName(sanitizedSpecifier)) {
                        return;
                    }
                    externalImports.add(sanitizedSpecifier);
                }
                else {
                    addInternalImport({ ...options, identifier, filePath, isReExport });
                }
            }
        }
        else {
            if (skipTypeOnly && isTypeOnly)
                return;
            if (shouldIgnore(getJSDocTags(node), tags))
                return;
            if (typeof pos === 'number') {
                const { line, character } = sourceFile.getLineAndCharacterOfPosition(pos);
                unresolvedImports.add({ specifier, pos, line: line + 1, col: character + 1 });
            }
            else {
                unresolvedImports.add({ specifier });
            }
        }
    };
    const maybeAddAccessExpressionAsNsImport = (namespace, member) => {
        const symbol = sourceFile.locals?.get(namespace);
        if (symbol) {
            const importedSymbolFilePath = importedInternalSymbols.get(symbol);
            if (importedSymbolFilePath) {
                const internalImport = internalImports[importedSymbolFilePath];
                if (typeof member === 'string')
                    internalImport.identifiers.add(`${namespace}.${member}`);
                else
                    for (const m of member)
                        internalImport.identifiers.add(`${namespace}.${m}`);
            }
        }
    };
    const addExport = ({ node, symbol, identifier, type, pos, members = [], fix }) => {
        if (options.skipExports)
            return;
        const isExportSpecifier = ts.isExportSpecifier(node);
        const isExportAssignment = ts.isExportAssignment(node);
        if (isExportSpecifier || isExportAssignment) {
            if (isExportSpecifier && node.propertyName) {
                const symbol = typeChecker.getSymbolAtLocation(node.propertyName);
                if (symbol) {
                    const importedSymbolFilePath = importedInternalSymbols.get(symbol);
                    if (importedSymbolFilePath) {
                        const internalImport = internalImports[importedSymbolFilePath];
                        internalImport.isReExport = true;
                        internalImport.isReExportedAs.add([sourceFile.fileName, node.name.getText()]);
                    }
                }
            }
            else if (symbol) {
                const importedSymbolFilePath = importedInternalSymbols.get(symbol);
                if (importedSymbolFilePath) {
                    const internalImport = internalImports[importedSymbolFilePath];
                    internalImport.isReExport = true;
                    if (isExportAssignment) {
                        internalImport.isReExportedAs.add([sourceFile.fileName, 'default']);
                    }
                    else {
                        internalImport.isReExportedNs.add([sourceFile.fileName, identifier]);
                    }
                }
            }
        }
        const jsDocTags = getJSDocTags(node);
        const serializedMembers = members.map(member => createSerializableMember(node, member, member.pos));
        if (exports[identifier]) {
            const item = exports[identifier];
            const members = [...(item.members ?? []), ...serializedMembers];
            const tags = new Set([...(item.jsDocTags ?? []), ...jsDocTags]);
            const fixes = fix ? [...(item.fixes ?? []), fix] : item.fixes;
            exports[identifier] = { ...item, members, jsDocTags: tags, fixes };
        }
        else {
            const { line, character } = node.getSourceFile().getLineAndCharacterOfPosition(pos);
            exports[identifier] = {
                identifier,
                symbol: node.symbol,
                type,
                members: serializedMembers,
                jsDocTags,
                pos,
                line: line + 1,
                col: character + 1,
                fixes: fix ? [fix] : [],
                refs: 0,
            };
        }
        if (!jsDocTags.has('@alias')) {
            if (ts.isExportAssignment(node))
                maybeAddAliasedExport(node.expression, 'default');
            if (ts.isVariableDeclaration(node))
                maybeAddAliasedExport(node.initializer, identifier);
        }
    };
    const addScript = (script) => scripts.add(script);
    const maybeAddAliasedExport = (node, alias) => {
        const identifier = node?.getText();
        if (node && identifier) {
            const symbol = sourceFile.symbol?.exports?.get(identifier);
            if (symbol?.valueDeclaration) {
                if (!aliasedExports.has(identifier)) {
                    const pos = getLineAndCharacterOfPosition(symbol.valueDeclaration, symbol.valueDeclaration.pos);
                    aliasedExports.set(identifier, [{ symbol: identifier, ...pos }]);
                }
                const aliasedExport = aliasedExports.get(identifier);
                if (aliasedExport) {
                    const pos = getLineAndCharacterOfPosition(node, node.pos);
                    aliasedExport.push({ symbol: alias, ...pos });
                }
            }
        }
    };
    const visit = (node) => {
        const addImportWithNode = (result) => addImport(result, node);
        for (const visitor of visitors.dynamicImport) {
            const result = visitor(node, options);
            result && (Array.isArray(result) ? result.forEach(addImportWithNode) : addImportWithNode(result));
        }
        const isTopLevel = node.parent === sourceFile || node.parent?.parent === sourceFile;
        if (isTopLevel) {
            for (const visitor of visitors.import) {
                const result = visitor(node, options);
                result && (Array.isArray(result) ? result.forEach(addImportWithNode) : addImportWithNode(result));
            }
            for (const visitor of visitors.export) {
                const result = visitor(node, options);
                result && (Array.isArray(result) ? result.forEach(addExport) : addExport(result));
            }
        }
        for (const visitor of visitors.script) {
            const result = visitor(node, options);
            result && (Array.isArray(result) ? result.forEach(addScript) : addScript(result));
        }
        if (ts.isIdentifier(node)) {
            const symbol = sourceFile.locals?.get(String(node.escapedText));
            if (symbol) {
                const importedSymbolFilePath = importedInternalSymbols.get(symbol);
                if (importedSymbolFilePath) {
                    if (isAccessExpression(node.parent)) {
                        if (isDestructuring(node.parent)) {
                            if (ts.isPropertyAccessExpression(node.parent)) {
                                const ns = String(symbol.escapedName);
                                const key = String(node.parent.name.escapedText);
                                const members = getDestructuredIds(node.parent.parent.name).map(n => `${key}.${n}`);
                                maybeAddAccessExpressionAsNsImport(ns, key);
                                maybeAddAccessExpressionAsNsImport(ns, members);
                            }
                        }
                        else {
                            const members = getAccessMembers(typeChecker, node);
                            maybeAddAccessExpressionAsNsImport(String(node.escapedText), members);
                        }
                    }
                    else if (isDestructuring(node)) {
                        const members = getDestructuredIds(node.parent.name);
                        maybeAddAccessExpressionAsNsImport(String(node.escapedText), members);
                    }
                    else if (isConsiderReferencedNS(node)) {
                        internalImports[importedSymbolFilePath].identifiers.add(String(node.escapedText));
                    }
                }
            }
        }
        if (isTopLevel &&
            ts.isImportEqualsDeclaration(node) &&
            ts.isQualifiedName(node.moduleReference) &&
            ts.isIdentifier(node.moduleReference.left)) {
            const { left, right } = node.moduleReference;
            if (sourceFile.locals?.get(left.text))
                maybeAddAccessExpressionAsNsImport(left.text, right.text);
        }
        if (ts.isTypeReferenceNode(node) && ts.isQualifiedName(node.typeName)) {
            const [ns, ...right] = [node.typeName.left.getText(), node.typeName.right.getText()].join('.').split('.');
            const members = right.map((_r, index) => right.slice(0, index + 1).join('.'));
            maybeAddAccessExpressionAsNsImport(ns, members);
        }
        ts.forEachChild(node, visit);
    };
    visit(sourceFile);
    const pragmaImports = getImportsFromPragmas(sourceFile);
    if (pragmaImports)
        for (const node of pragmaImports)
            addImport(node, sourceFile);
    const setRefs = (item) => {
        if (!item.symbol)
            return;
        const symbols = new Set();
        for (const match of sourceFile.text.matchAll(new RegExp(item.identifier.replace(/\$/g, '\\$'), 'g'))) {
            const isDeclaration = match.index === item.pos || match.index === item.pos + 1;
            if (!isDeclaration) {
                const symbol = typeChecker.getSymbolAtLocation(ts.getTokenAtPosition(sourceFile, match.index));
                if (symbol) {
                    if (item.symbol === symbol) {
                        item.refs = 1;
                        break;
                    }
                    const declaration = symbol.declarations?.[0];
                    if (declaration) {
                        if (item.symbol === declaration.name?.flowNode?.node?.symbol) {
                            item.refs = 1;
                            break;
                        }
                        if (ts.isImportSpecifier(declaration) && symbols.has(symbol)) {
                            item.refs = 1;
                            break;
                        }
                    }
                    symbols.add(symbol);
                }
            }
        }
    };
    for (const key in exports) {
        const item = exports[key];
        if (options.ignoreExportsUsedInFile)
            setRefs(item);
        for (const member of item.members) {
            setRefs(member);
            member.symbol = undefined;
        }
        item.symbol = undefined;
    }
    return {
        imports: {
            internal: internalImports,
            external: externalImports,
            unresolved: unresolvedImports,
        },
        exports: {
            exported: exports,
            duplicate: [...aliasedExports.values()],
        },
        scripts,
    };
};
export const _getImportsAndExports = timerify(getImportsAndExports);
