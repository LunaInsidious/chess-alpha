import { existsSync } from 'node:fs';
import { isBuiltin } from 'node:module';
import ts from 'typescript';
import { DEFAULT_EXTENSIONS } from '../constants.js';
import { sanitizeSpecifier } from '../util/modules.js';
import { dirname, extname, isAbsolute, isInNodeModules, isInternal, join } from '../util/path.js';
import { resolveSync } from '../util/resolve.js';
import { isDeclarationFileExtension } from './ast-helpers.js';
import { ensureRealFilePath, isVirtualFilePath } from './sys.js';
const resolutionCache = new Map();
const fileExists = (name, containingFile) => {
    const resolvedFileName = isAbsolute(name) ? name : join(dirname(containingFile), name);
    if (existsSync(resolvedFileName)) {
        return {
            resolvedFileName,
            extension: extname(name),
            isExternalLibraryImport: false,
            resolvedUsingTsExtension: false,
        };
    }
};
export function createCustomModuleResolver(customSys, compilerOptions, virtualFileExtensions, useCache = true) {
    const extensions = [...DEFAULT_EXTENSIONS, ...virtualFileExtensions];
    function resolveModuleNames(moduleNames, containingFile) {
        return moduleNames.map(moduleName => {
            if (!useCache)
                return resolveModuleName(moduleName, containingFile);
            const key = moduleName.startsWith('.')
                ? join(dirname(containingFile), moduleName)
                : `${containingFile}:${moduleName}`;
            if (resolutionCache.has(key))
                return resolutionCache.get(key);
            const resolvedModule = resolveModuleName(moduleName, containingFile);
            resolutionCache.set(key, resolvedModule);
            return resolvedModule;
        });
    }
    function resolveModuleName(name, containingFile) {
        const sanitizedSpecifier = sanitizeSpecifier(name);
        if (isBuiltin(sanitizedSpecifier) || isInNodeModules(name))
            return undefined;
        {
            const resolvedFileName = resolveSync(sanitizedSpecifier, containingFile, extensions);
            if (resolvedFileName) {
                const ext = extname(resolvedFileName);
                const extension = virtualFileExtensions.includes(ext) ? ts.Extension.Js : ext;
                return {
                    resolvedFileName: resolvedFileName,
                    extension,
                    isExternalLibraryImport: isInNodeModules(resolvedFileName),
                    resolvedUsingTsExtension: false,
                };
            }
        }
        const tsResolvedModule = ts.resolveModuleName(sanitizedSpecifier, containingFile, compilerOptions, ts.sys).resolvedModule;
        if (tsResolvedModule &&
            isDeclarationFileExtension(tsResolvedModule.extension) &&
            isInternal(tsResolvedModule.resolvedFileName)) {
            if (tsResolvedModule.extension === '.d.mts') {
                const resolvedFileName = tsResolvedModule.resolvedFileName.replace(/\.d\.mts$/, '.mjs');
                return { resolvedFileName, extension: '.mjs', isExternalLibraryImport: false, resolvedUsingTsExtension: false };
            }
            if (tsResolvedModule.extension === '.d.cts') {
                const resolvedFileName = tsResolvedModule.resolvedFileName.replace(/\.d\.cts$/, '.cjs');
                return { resolvedFileName, extension: '.cjs', isExternalLibraryImport: false, resolvedUsingTsExtension: false };
            }
            const base = tsResolvedModule.resolvedFileName.replace(/\.d\.ts$/, '');
            const baseExt = extname(base);
            if (baseExt && virtualFileExtensions.includes(baseExt)) {
                const resolvedFileName = ensureRealFilePath(base, virtualFileExtensions);
                return {
                    resolvedFileName,
                    extension: ts.Extension.Js,
                    isExternalLibraryImport: false,
                    resolvedUsingTsExtension: false,
                };
            }
            for (const ext of ['.js', '.jsx']) {
                const module = fileExists(base + ext, containingFile);
                if (module)
                    return module;
            }
            return tsResolvedModule;
        }
        if (tsResolvedModule && !isVirtualFilePath(tsResolvedModule.resolvedFileName, virtualFileExtensions)) {
            return tsResolvedModule;
        }
        const customResolvedModule = ts.resolveModuleName(sanitizedSpecifier, containingFile, compilerOptions, customSys).resolvedModule;
        if (!(customResolvedModule && isVirtualFilePath(customResolvedModule.resolvedFileName, virtualFileExtensions))) {
            const module = fileExists(sanitizedSpecifier, containingFile);
            if (module)
                return module;
            return customResolvedModule;
        }
        const resolvedFileName = ensureRealFilePath(customResolvedModule.resolvedFileName, virtualFileExtensions);
        const resolvedModule = {
            extension: ts.Extension.Js,
            resolvedFileName,
            isExternalLibraryImport: customResolvedModule.isExternalLibraryImport,
        };
        return resolvedModule;
    }
    return resolveModuleNames;
}
