import ts from 'typescript';
import { importVisitor as visit } from '../index.js';
export default visit(() => true, node => {
    if (ts.isExportDeclaration(node)) {
        if (node.moduleSpecifier && ts.isStringLiteralLike(node.moduleSpecifier)) {
            if (!node.exportClause) {
                return { identifier: '*', specifier: node.moduleSpecifier.text, isReExport: true, pos: node.pos };
            }
            if (node.exportClause.kind === ts.SyntaxKind.NamespaceExport) {
                return {
                    identifier: '*',
                    namespace: node.exportClause.name.escapedText,
                    specifier: node.moduleSpecifier.text,
                    isReExport: true,
                    pos: node.exportClause.name.pos,
                };
            }
            const specifier = node.moduleSpecifier;
            return node.exportClause.elements.map(element => {
                if (element.propertyName && element.name) {
                    return {
                        identifier: String(element.name.escapedText),
                        namespace: element.propertyName.escapedText,
                        specifier: specifier.text,
                        isReExport: true,
                        pos: element.pos,
                    };
                }
                return {
                    identifier: (element.propertyName ?? element.name).getText(),
                    specifier: specifier.text,
                    isReExport: true,
                    pos: element.pos,
                };
            });
        }
    }
});
