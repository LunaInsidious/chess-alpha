import ts from 'typescript';
import { SymbolType } from '../../../types/issues.js';
import { exportVisitor as visit } from '../index.js';
export default visit(() => true, (node, { isFixExports, isFixTypes }) => {
    if (ts.isExportDeclaration(node)) {
        if (node.exportClause && ts.isNamedExports(node.exportClause)) {
            const type = node.isTypeOnly ? SymbolType.TYPE : SymbolType.UNKNOWN;
            const sourceFile = node.getSourceFile();
            const declarations = sourceFile.getNamedDeclarations?.();
            return node.exportClause.elements.map(element => {
                const identifier = String(element.name.escapedText);
                const declaration = declarations?.get(identifier)?.find((d) => d !== element);
                const pos = element.name.pos;
                const fix = isFixExports || isFixTypes ? [element.getStart(), element.getEnd()] : undefined;
                return { node: element, symbol: declaration?.symbol, identifier, type, pos, fix };
            });
        }
    }
});
