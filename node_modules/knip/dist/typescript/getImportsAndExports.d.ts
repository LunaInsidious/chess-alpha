import ts from 'typescript';
import type { Tags } from '../types/cli.js';
import type { IssueSymbol } from '../types/issues.js';
import type { SerializableExports, SerializableImportMap, UnresolvedImport } from '../types/serializable-map.js';
import type { BoundSourceFile, GetResolvedModule } from './SourceFile.js';
export type GetImportsAndExportsOptions = {
    skipTypeOnly: boolean;
    skipExports: boolean;
    isFixExports: boolean;
    isFixTypes: boolean;
    isReportClassMembers: boolean;
    ignoreExportsUsedInFile: boolean;
    tags: Tags;
};
export declare const _getImportsAndExports: (sourceFile: BoundSourceFile, getResolvedModule: GetResolvedModule, typeChecker: ts.TypeChecker, options: GetImportsAndExportsOptions) => {
    imports: {
        internal: SerializableImportMap;
        external: Set<string>;
        unresolved: Set<UnresolvedImport>;
    };
    exports: {
        exported: SerializableExports;
        duplicate: IssueSymbol[][];
    };
    scripts: Set<string>;
};
