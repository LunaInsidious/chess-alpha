{"version":3,"file":"javascript-lexer.js","names":["BaseLexer","ts","JavascriptLexer","_BaseLexer","_inherits","_super","_createSuper","_this","options","arguments","length","undefined","_classCallCheck","call","callPattern","functionPattern","functions","namespaceFunctions","attr","parseGenerics","typeMap","_createClass","key","value","createCommentNodeParser","_this2","visitedComments","Set","keys","node","content","forEachLeadingCommentRange","getFullStart","pos","end","kind","commentId","concat","SyntaxKind","MultiLineCommentTrivia","SingleLineCommentTrivia","has","add","text","slice","commentKeys","commentExtractor","push","apply","_toConsumableArray","setNamespaces","_this3","defaultNamespace","map","entry","_objectSpread","namespace","setKeyPrefixes","_this4","keyPrefix","extract","_this5","filename","parseCommentNode","parseTree","ArrowFunction","FunctionDeclaration","functionParamExtractor","TaggedTemplateExpression","taggedTemplateExpressionExtractor","CallExpression","expressionExtractor","forEachChild","sourceFile","createSourceFile","ScriptTarget","Latest","_this6","tFunctionParam","parameters","find","param","name","Identifier","includes","type","typeName","typeArguments","LiteralType","literal","tag","template","isTranslationFunction","NoSubstitutionTemplateLiteral","TemplateExpression","emit","_this7","expression","escapedText","namespaceArgument","optionsArgument","namespaces","elements","ns","StringLiteral","ObjectLiteralExpression","keyPrefixNode","properties","p","initializer","expressionToName","keyArgument","shift","BinaryExpression","concatenatedString","concatenateString","typeArgument","parseTypeArgument","typeArg","TypeLiteral","_iterator","_createForOfIteratorHelper","members","_step","s","n","done","member","err","e","f","TypeReference","Object","assign","Array","isArray","types","forEach","tp","defaultValue","_iterator2","_step2","SpreadAssignment","TrueKeyword","FalseKeyword","_typeof","commentText","_this8","regexp","RegExp","expressions","match","expressionKeys","binaryExpression","string","operatorToken","PlusToken","left","right","filter","join","default"],"sources":["../../src/lexers/javascript-lexer.js"],"sourcesContent":["import BaseLexer from './base-lexer.js'\nimport ts from 'typescript'\n\nexport default class JavascriptLexer extends BaseLexer {\n  constructor(options = {}) {\n    super(options)\n\n    this.callPattern = '(?<=^|\\\\s|\\\\.)' + this.functionPattern() + '\\\\(.*\\\\)'\n    this.functions = options.functions || ['t']\n    this.namespaceFunctions = options.namespaceFunctions || [\n      'useTranslation',\n      'withTranslation',\n    ]\n    this.attr = options.attr || 'i18nKey'\n    this.parseGenerics = options.parseGenerics || false\n    this.typeMap = options.typeMap || {}\n  }\n\n  createCommentNodeParser() {\n    const visitedComments = new Set()\n\n    return (keys, node, content) => {\n      ts.forEachLeadingCommentRange(\n        content,\n        node.getFullStart(),\n        (pos, end, kind) => {\n          const commentId = `${pos}_${end}`\n          if (\n            (kind === ts.SyntaxKind.MultiLineCommentTrivia ||\n              kind === ts.SyntaxKind.SingleLineCommentTrivia) &&\n            !visitedComments.has(commentId)\n          ) {\n            visitedComments.add(commentId)\n            const text = content.slice(pos, end)\n            const commentKeys = this.commentExtractor.call(this, text)\n            if (commentKeys) {\n              keys.push(...commentKeys)\n            }\n          }\n        }\n      )\n    }\n  }\n\n  setNamespaces(keys) {\n    if (this.defaultNamespace) {\n      return keys.map((entry) => ({\n        ...entry,\n        namespace: entry.namespace || this.defaultNamespace,\n      }))\n    }\n\n    return keys\n  }\n\n  setKeyPrefixes(keys) {\n    if (this.keyPrefix) {\n      return keys.map((key) => ({\n        ...key,\n        keyPrefix: this.keyPrefix,\n      }))\n    }\n\n    return keys\n  }\n\n  extract(content, filename = '__default.js') {\n    const keys = []\n\n    const parseCommentNode = this.createCommentNodeParser()\n\n    const parseTree = (node) => {\n      let entry\n\n      parseCommentNode(keys, node, content)\n\n      if (\n        node.kind === ts.SyntaxKind.ArrowFunction ||\n        node.kind === ts.SyntaxKind.FunctionDeclaration\n      ) {\n        this.functionParamExtractor.call(this, node)\n      }\n\n      if (node.kind === ts.SyntaxKind.TaggedTemplateExpression) {\n        entry = this.taggedTemplateExpressionExtractor.call(this, node)\n      }\n\n      if (node.kind === ts.SyntaxKind.CallExpression) {\n        entry = this.expressionExtractor.call(this, node)\n      }\n\n      if (entry) {\n        keys.push(entry)\n      }\n\n      node.forEachChild(parseTree)\n    }\n\n    const sourceFile = ts.createSourceFile(\n      filename,\n      content,\n      ts.ScriptTarget.Latest\n    )\n    parseTree(sourceFile)\n\n    return this.setNamespaces(keys)\n  }\n\n  /** @param {ts.FunctionLikeDeclaration} node */\n  functionParamExtractor(node) {\n    const tFunctionParam =\n      node.parameters &&\n      node.parameters.find(\n        (param) =>\n          param.name &&\n          param.name.kind === ts.SyntaxKind.Identifier &&\n          this.functions.includes(param.name.text)\n      )\n\n    if (\n      tFunctionParam &&\n      tFunctionParam.type &&\n      tFunctionParam.type.typeName &&\n      tFunctionParam.type.typeName.text === 'TFunction'\n    ) {\n      const { typeArguments } = tFunctionParam.type\n      if (\n        typeArguments &&\n        typeArguments.length &&\n        typeArguments[0].kind === ts.SyntaxKind.LiteralType\n      ) {\n        this.defaultNamespace = typeArguments[0].literal.text\n      }\n    }\n  }\n\n  taggedTemplateExpressionExtractor(node) {\n    const entry = {}\n\n    const { tag, template } = node\n\n    const isTranslationFunction =\n      (tag.text && this.functions.includes(tag.text)) ||\n      (tag.name && this.functions.includes(tag.name.text))\n\n    if (!isTranslationFunction) return null\n\n    if (template.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral) {\n      entry.key = template.text\n    } else if (template.kind === ts.SyntaxKind.TemplateExpression) {\n      this.emit(\n        'warning',\n        'A key that is a template string must not have any interpolations.'\n      )\n      return null\n    }\n\n    return entry\n  }\n\n  expressionExtractor(node) {\n    const entry = {}\n\n    if (\n      this.namespaceFunctions.includes(node.expression.escapedText) &&\n      node.arguments.length\n    ) {\n      const namespaceArgument = node.arguments[0]\n      const optionsArgument = node.arguments[1]\n      // The namespace argument can be either an array of namespaces or a single namespace,\n      // so we convert it to an array in the case of a single namespace so that we can use\n      // the same code in both cases\n      const namespaces = namespaceArgument.elements || [namespaceArgument]\n\n      // Find the first namespace that is a string literal, or is `undefined`. In the case\n      // of `undefined`, we do nothing (see below), leaving the default namespace unchanged\n      const namespace = namespaces.find(\n        (ns) =>\n          ns.kind === ts.SyntaxKind.StringLiteral ||\n          (ns.kind === ts.SyntaxKind.Identifier && ns.text === 'undefined')\n      )\n\n      if (!namespace) {\n        // We know that the namespace argument was provided, so if we're unable to find a\n        // namespace, emit a warning since this will likely cause issues for the user\n        this.emit(\n          'warning',\n          namespaceArgument.kind === ts.SyntaxKind.Identifier\n            ? `Namespace is not a string literal nor an array containing a string literal: ${namespaceArgument.text}`\n            : 'Namespace is not a string literal nor an array containing a string literal'\n        )\n      } else if (namespace.kind === ts.SyntaxKind.StringLiteral) {\n        // We found a string literal namespace, so we'll use this instead of the default\n        this.defaultNamespace = namespace.text\n      }\n\n      if (\n        optionsArgument &&\n        optionsArgument.kind === ts.SyntaxKind.ObjectLiteralExpression\n      ) {\n        const keyPrefixNode = optionsArgument.properties.find(\n          (p) => p.name.escapedText === 'keyPrefix'\n        )\n        if (keyPrefixNode != null) {\n          this.keyPrefix = keyPrefixNode.initializer.text\n        }\n      }\n    }\n\n    const isTranslationFunction =\n      // If the expression is a string literal, we can just check if it's in the\n      // list of functions\n      (node.expression.text && this.functions.includes(node.expression.text)) ||\n      // Support the case where the function is contained in a namespace, i.e.\n      // match `i18n.t()` when this.functions = ['t'].\n      (node.expression.name &&\n        this.functions.includes(node.expression.name.text)) ||\n      // Support matching the namespace as well, i.e. match `i18n.t()` but _not_\n      // `l10n.t()` when this.functions = ['i18n.t']\n      this.functions.includes(this.expressionToName(node.expression))\n\n    if (isTranslationFunction) {\n      const keyArgument = node.arguments.shift()\n\n      if (!keyArgument) {\n        return null\n      }\n\n      if (\n        keyArgument.kind === ts.SyntaxKind.StringLiteral ||\n        keyArgument.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral\n      ) {\n        entry.key = keyArgument.text\n      } else if (keyArgument.kind === ts.SyntaxKind.BinaryExpression) {\n        const concatenatedString = this.concatenateString(keyArgument)\n        if (!concatenatedString) {\n          this.emit(\n            'warning',\n            `Key is not a string literal: ${keyArgument.text}`\n          )\n          return null\n        }\n        entry.key = concatenatedString\n      } else {\n        this.emit(\n          'warning',\n          keyArgument.kind === ts.SyntaxKind.Identifier\n            ? `Key is not a string literal: ${keyArgument.text}`\n            : 'Key is not a string literal'\n        )\n        return null\n      }\n\n      if (this.parseGenerics && node.typeArguments) {\n        let typeArgument = node.typeArguments.shift()\n\n        const parseTypeArgument = (typeArg) => {\n          if (!typeArg) {\n            return\n          }\n          if (typeArg.kind === ts.SyntaxKind.TypeLiteral) {\n            for (const member of typeArg.members) {\n              entry[member.name.text] = ''\n            }\n          } else if (\n            typeArg.kind === ts.SyntaxKind.TypeReference &&\n            typeArg.typeName.kind === ts.SyntaxKind.Identifier\n          ) {\n            const typeName = typeArg.typeName.text\n            if (typeName in this.typeMap) {\n              Object.assign(entry, this.typeMap[typeName])\n            }\n          } else if (Array.isArray(typeArg.types)) {\n            typeArgument.types.forEach((tp) => parseTypeArgument(tp))\n          }\n        }\n\n        parseTypeArgument(typeArgument)\n      }\n\n      let optionsArgument = node.arguments.shift()\n\n      // Second argument could be a (concatenated) string default value\n      if (\n        optionsArgument &&\n        (optionsArgument.kind === ts.SyntaxKind.StringLiteral ||\n          optionsArgument.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral)\n      ) {\n        entry.defaultValue = optionsArgument.text\n        optionsArgument = node.arguments.shift()\n      } else if (\n        optionsArgument &&\n        optionsArgument.kind === ts.SyntaxKind.BinaryExpression\n      ) {\n        const concatenatedString = this.concatenateString(optionsArgument)\n        if (!concatenatedString) {\n          this.emit(\n            'warning',\n            `Default value is not a string literal: ${optionsArgument.text}`\n          )\n          return null\n        }\n        entry.defaultValue = concatenatedString\n        optionsArgument = node.arguments.shift()\n      }\n\n      if (\n        optionsArgument &&\n        optionsArgument.kind === ts.SyntaxKind.ObjectLiteralExpression\n      ) {\n        for (const p of optionsArgument.properties) {\n          if (p.kind === ts.SyntaxKind.SpreadAssignment) {\n            this.emit(\n              'warning',\n              `Options argument is a spread operator : ${p.expression.text}`\n            )\n          } else if (p.initializer) {\n            if (p.initializer.kind === ts.SyntaxKind.TrueKeyword) {\n              entry[p.name.text] = true\n            } else if (p.initializer.kind === ts.SyntaxKind.FalseKeyword) {\n              entry[p.name.text] = false\n            } else {\n              entry[p.name.text] = p.initializer.text || ''\n            }\n          } else {\n            entry[p.name.text] = ''\n          }\n        }\n      }\n\n      if (entry.ns) {\n        if (typeof entry.ns === 'string') {\n          entry.namespace = entry.ns\n        } else if (typeof entry.ns === 'object' && entry.ns.length) {\n          entry.namespace = entry.ns[0]\n        }\n      }\n\n      return entry\n    }\n\n    return null\n  }\n\n  commentExtractor(commentText) {\n    const regexp = new RegExp(this.callPattern, 'g')\n    const expressions = commentText.match(regexp)\n\n    if (!expressions) {\n      return null\n    }\n\n    const keys = []\n    expressions.forEach((expression) => {\n      const expressionKeys = this.extract(expression)\n      if (expressionKeys) {\n        keys.push(...expressionKeys)\n      }\n    })\n    return keys\n  }\n\n  concatenateString(binaryExpression, string = '') {\n    if (binaryExpression.operatorToken.kind !== ts.SyntaxKind.PlusToken) {\n      return\n    }\n\n    if (binaryExpression.left.kind === ts.SyntaxKind.BinaryExpression) {\n      string += this.concatenateString(binaryExpression.left, string)\n    } else if (binaryExpression.left.kind === ts.SyntaxKind.StringLiteral) {\n      string += binaryExpression.left.text\n    } else {\n      return\n    }\n\n    if (binaryExpression.right.kind === ts.SyntaxKind.BinaryExpression) {\n      string += this.concatenateString(binaryExpression.right, string)\n    } else if (binaryExpression.right.kind === ts.SyntaxKind.StringLiteral) {\n      string += binaryExpression.right.text\n    } else {\n      return\n    }\n\n    return string\n  }\n\n  /**\n   * Recursively computes the name of a dot-separated expression, e.g. `t` or `t.ns`\n   * @type {(expression: ts.LeftHandSideExpression | ts.JsxTagNameExpression) => string}\n   */\n  expressionToName(expression) {\n    if (expression) {\n      if (expression.text) {\n        return expression.text\n      } else if (expression.name) {\n        return [\n          this.expressionToName(expression.expression),\n          this.expressionToName(expression.name),\n        ]\n          .filter((s) => s && s.length > 0)\n          .join('.')\n      }\n    }\n    return undefined\n  }\n}\n"],"mappings":"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"}